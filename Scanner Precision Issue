<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Infographic: The Case of the Imprecise BigDecimal</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f8fafc;
        }
        .chart-container {
            position: relative;
            width: 100%;
            max-width: 600px;
            margin-left: auto;
            margin-right: auto;
            height: 300px;
            max-height: 400px;
        }
        @media (min-width: 768px) {
            .chart-container {
                height: 350px;
            }
        }
        .flow-arrow {
            font-size: 2rem;
            line-height: 1;
            color: #7a5195;
        }
        .code-block {
            background-color: #003f5c;
            color: #f8fafc;
            padding: 1rem;
            border-radius: 0.5rem;
            font-family: monospace;
            white-space: pre-wrap;
            word-break: break-all;
        }
        .highlight-red { color: #ef5675; }
        .highlight-green { color: #a3e635; }
    </style>
</head>
<body class="text-[#003f5c]">

    <div class="container mx-auto p-4 md:p-8">

        <header class="text-center mb-12">
            <h1 class="text-4xl md:text-5xl font-bold text-[#003f5c] mb-2">The Case of the Imprecise BigDecimal</h1>
            <p class="text-lg text-[#374c80]">A deep dive into a subtle rounding issue and its resolution.</p>
        </header>

        <main class="grid grid-cols-1 md:grid-cols-2 gap-8">

            <section class="md:col-span-2 bg-white rounded-lg shadow-md p-6">
                <h2 class="text-2xl font-bold text-[#7a5195] mb-4">The Problem: A Critical Precision Mismatch</h2>
                <p class="mb-6">An application was generating XML output with incorrect precision for the `IMAGE_POSITION` field. The system was rounding the value, leading to a loss of critical data required by downstream processes.</p>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6 text-center">
                    <div class="bg-red-50 border border-red-200 rounded-lg p-4">
                        <h3 class="font-semibold text-red-800 mb-2">Actual Output (Incorrect)</h3>
                        <p class="text-4xl font-bold text-red-600">34.3</p>
                    </div>
                    <div class="bg-green-50 border border-green-200 rounded-lg p-4">
                        <h3 class="font-semibold text-green-800 mb-2">Required Output (Correct)</h3>
                        <p class="text-4xl font-bold text-green-600">34.254000</p>
                    </div>
                </div>
            </section>

            <section class="md:col-span-2 bg-white rounded-lg shadow-md p-6">
                <h2 class="text-2xl font-bold text-[#7a5195] mb-4">Investigation: Tracing the Data Flow</h2>
                <p class="mb-6">The debugging process followed the data from its source in the database, through the Java business logic, to the final XML output to pinpoint the source of the rounding.</p>
                <div class="flex flex-col md:flex-row items-center justify-around space-y-4 md:space-y-0 md:space-x-4">
                    <div class="text-center p-4 border-2 border-dashed border-[#bc5090] rounded-lg">
                        <h3 class="font-bold text-lg">1. Database Value</h3>
                        <p>UCS_MASKSET_ATTR</p>
                        <p class="font-mono text-xl text-[#bc5090]">8563.5</p>
                    </div>
                    <div class="transform rotate-90 md:rotate-0 flow-arrow">→</div>
                    <div class="text-center p-4 border-2 border-dashed border-[#ef5675] rounded-lg">
                        <h3 class="font-bold text-lg">2. Java Calculation</h3>
                        <p>.divide(..., ROUND_HALF_UP)</p>
                        <p class="font-mono text-xl text-[#ef5675]">Causes Rounding</p>
                    </div>
                    <div class="transform rotate-90 md:rotate-0 flow-arrow">→</div>
                    <div class="text-center p-4 border-2 border-dashed border-[#ff764a] rounded-lg">
                        <h3 class="font-bold text-lg">3. XML Output</h3>
                        <p>&lt;y&gt;...&lt;/y&gt;</p>
                        <p class="font-mono text-xl text-[#ff764a]">34.3</p>
                    </div>
                </div>
            </section>
            
            <section class="bg-white rounded-lg shadow-md p-6">
                <h2 class="text-2xl font-bold text-[#7a5195] mb-4">Analysis: The Root Cause</h2>
                <p class="mb-4">The core issue was identified in the `BigDecimal.divide()` method. When called without an explicit `scale` (number of decimal places), Java's default `MathContext` can apply unexpected rounding based on the environment, leading to precision loss at the point of calculation, not during formatting as initially suspected.</p>
                <div class="chart-container">
                    <canvas id="comparisonChart"></canvas>
                </div>
                 <p class="text-center text-sm text-gray-500 mt-2">Comparison of calculation results with and without explicit scale.</p>
            </section>

            <section class="bg-white rounded-lg shadow-md p-6">
                <h2 class="text-2xl font-bold text-[#7a5195] mb-4">The Solution: Specifying the Scale</h2>
                <p class="mb-4">The fix was to provide an explicit scale to the `divide()` method, ensuring the calculation retains the required number of decimal places regardless of the environment's default settings. This guarantees the correct precision is maintained.</p>
                <div>
                    <h3 class="font-semibold mb-2">Original Code (Incorrect)</h3>
                    <div class="code-block mb-4">
                        <span class="highlight-red">.divide(BigDecimal.valueOf(1000), BigDecimal.ROUND_HALF_UP);</span>
                    </div>

                    <h3 class="font-semibold mb-2">Corrected Code (Precise)</h3>
                    <div class="code-block">
                        <span class="highlight-green">.divide(BigDecimal.valueOf(1000), 6, BigDecimal.ROUND_HALF_UP);</span>
                    </div>
                </div>
            </section>

            <section class="md:col-span-2 bg-white rounded-lg shadow-md p-6">
                <h2 class="text-2xl font-bold text-[#7a5195] mb-4">Key Takeaways</h2>
                <ul class="space-y-3 list-disc list-inside text-[#374c80]">
                    <li><strong>Always specify scale and rounding mode for `BigDecimal` division.</strong> Relying on default behavior can lead to environment-specific bugs that are hard to trace.</li>
                    <li><strong>Isolate calculations to verify behavior.</strong> Testing the problematic line of code in a minimal environment quickly revealed the source of the rounding.</li>
                    <li><strong>Precision loss can occur at the calculation level.</strong> It's not always a formatting or serialization issue. The `BigDecimal` object itself can hold an incorrectly rounded value if not handled carefully.</li>
                </ul>
            </section>

        </main>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const ctx = document.getElementById('comparisonChart').getContext('2d');
            new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: ['Calculation without Scale', 'Calculation with Scale (6)'],
                    datasets: [{
                        label: 'Calculated Value',
                        data: [34.3, 34.254],
                        backgroundColor: [
                            '#ef5675',
                            '#7a5195'
                        ],
                        borderColor: [
                            '#ef5675',
                            '#7a5195'
                        ],
                        borderWidth: 1
                    }]
                },
                options: {
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: false,
                            min: 34.2,
                            ticks: {
                                color: '#003f5c'
                            },
                             grid: {
                                color: '#e2e8f0'
                            }
                        },
                        x: {
                             ticks: {
                                color: '#003f5c'
                            },
                             grid: {
                                display: false
                            }
                        }
                    },
                    plugins: {
                        legend: {
                            display: false
                        },
                        tooltip: {
                            callbacks: {
                                title: function(tooltipItems) {
                                    const item = tooltipItems[0];
                                    let label = item.chart.data.labels[item.dataIndex];
                                    if (Array.isArray(label)) {
                                      return label.join(' ');
                                    } else {
                                      return label;
                                    }
                                }
                            }
                        }
                    }
                }
            });
        });
    </script>

</body>
</html>
